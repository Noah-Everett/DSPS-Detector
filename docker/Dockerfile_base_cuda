#############################################################################
####                    G4-DSPS-Detector-Simulation                      ####
#############################################################################
####                                                                     ####
#### Author:                                                             ####
####   Noah Everett (noah.everett@mines.sdsmt.edu)                       ####
####                                                                     ####
#### This file is based on the anniedirt Dockerfile created by me.       ####
#### https://github.com/ANNIEsoft/anniedirt/blob/genie_3_0_6/Dockerfile  ####
####                                                                     ####
#############################################################################
####                                                                     ####
#############################################################################



##############################
########## Set FROM ##########
##############################
FROM nvidia/cuda:13.0.0-cudnn-devel-rockylinux9



##############################
########## Set User ##########
##############################
USER root



#######################################
########## Build Environment ##########
#######################################
# ROOT threw an error when building the internal freetype and pcre libraries so I installed them up front
RUN yum install -y gcc \
                   gcc-c++ \
                   gcc-gfortran \
                   cmake \
                   make \
                   git \
                   wget \
                   libxml2-devel \
                   gsl-devel \
                   which \
                   freetype-devel \
                   pcre-devel \
                   libnsl \
 && yum clean all \
 && rm -rf /vr/cache/yum \
 && dnf install -y python3.11-devel \
                   python3.11-pip \
 && dnf clean all \
 && rm -rf /var/cache/dnf \
 && pip3.11 install --upgrade pip \
 && pip3.11 install numpy \
 && pip cache purge \
 && wget https://raw.githubusercontent.com/Noah-Everett/DSPS-Detector/main/docker/setup_Dockerfile.sh



############################
########## fsplit ##########
############################
RUN source /setup_Dockerfile.sh \
 && mkdir /fsplit \
 && cd /fsplit \
 && wget https://gist.githubusercontent.com/marc1uk/c0e32d955dd1c06ef69d80ce643018ad/raw/10e592d42737ecc7dca677e774ae66dcb5a3859d/fsplit.c \
 && gcc fsplit.c -o fsplit \
 && cd /



#############################
########## Pythia6 ##########
#############################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 https://github.com/Noah-Everett/Pythia6Support /Pythia6 \
 && cd /Pythia6 \
 && ./build_pythia6.sh --dummies=remove \
 && cd /



###########################
########## Expat ##########
###########################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 --branch R_2_5_0 https://github.com/libexpat/libexpat /Expat_src \
 && mkdir /Expat_build \
 && mkdir /Expat_install \
 && cd /Expat_build \
 && cmake /Expat_src/expat -DCMAKE_INSTALL_PREFIX=/Expat_install \
                           -DCMAKE_CXX_STANDARD=${STD} \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /Expat_src \
 && rm -rf /Expat_build



##############################
########## Xerces-C ##########
##############################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 --branch v3.2.4 https://github.com/apache/xerces-c /Xerces-C_src \
 && mkdir /Xerces-C_build \
 && mkdir /Xerces-C_install \
 && cd /Xerces-C_build \
 && cmake /Xerces-C_src -DCMAKE_INSTALL_PREFIX=/Xerces-C_install \
                        -DCMAKE_CXX_STANDARD=${STD} \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /Xerces-C_src \
 && rm -rf /Xerces-C_build



##########################
########## ROOT ##########
##########################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 --branch v6-24-06 https://github.com/root-project/root /ROOT_src \
 && mkdir /ROOT_build \
 && mkdir /ROOT_install \
 && cd /ROOT_build \
 && cmake /ROOT_src -DCMAKE_INSTALL_PREFIX=/ROOT_install \
                    -Dx11=OFF \
                    -Dminimal=ON \
                    -Dgdml=ON \
                    -Dmathmore=ON \
                    -Dxml=ON \
                    -Dpythia6=ON \
                    -DCMAKE_CXX_STANDARD=${STD} \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /ROOT_src \
 && rm -rf /ROOT_build



############################
########## Geant4 ##########
############################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 --branch v11.2.1 https://github.com/Geant4/geant4 /Geant4_src \
 && mkdir /Geant4_build \
 && mkdir /Geant4_install \
 && cd /Geant4_build \
 && cmake /Geant4_src -DCMAKE_INSTALL_PREFIX=/Geant4_install \
                      -DCMAKE_PREFIX_PATH=/Xerces-C_install \
                      -DGEANT4_USE_GDML=ON \
                      -DGEANT4_USE_SYSTEM_EXPAT=OFF \
                      -DGEANT4_INSTALL_DATA=ON \
                      -DGEANT4_BUILD_MULTITHREADED=ON \
                      -DCMAKE_CXX_STANDARD=${STD} \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /Geant4_src \
 && rm -rf /Geant4_build



############################
########## LHAPDF ##########
############################
RUN source /setup_Dockerfile.sh \
 && ln -s $(which python3) /usr/bin/python \
 && wget https://lhapdf.hepforge.org/downloads/?f=LHAPDF-6.5.4.tar.gz -O /LHAPDF.tar.gz \
 && tar xf /LHAPDF.tar.gz \
 && mv /LHAPDF-6.5.4 /LHAPDF \
 && rm -f /LHAPDF.tar.gz \
 && cd /LHAPDF \
 && ./configure --prefix=/LHAPDF_install \
 && make CXXFLAGS+=" -std=c++${STD}" -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /LHAPDF



#############################
########## log4cpp ##########
#############################
#  && git clone --depth 1 --branch v2.9.1 https://github.com/orocos-toolchain/log4cpp /log4cpp_src \
RUN source /setup_Dockerfile.sh \
 && wget https://sourceforge.net/projects/log4cpp/files/log4cpp-1.1.x%20%28new%29/log4cpp-1.1/log4cpp-1.1.4.tar.gz -O /log4cpp.tar.gz \
 && tar xf /log4cpp.tar.gz \
 && mv /log4cpp /log4cpp_src \
 && rm -f /log4cpp.tar.gz \
 && mkdir /log4cpp_build \
 && mkdir /log4cpp_install \
 && touch /log4cpp_src/include/log4cpp/config.h \
 && cd /log4cpp_build \
 && cmake /log4cpp_src -DCMAKE_INSTALL_PREFIX=/log4cpp_install \
                       -DCMAKE_CXX_STANDARD=${STD} \
                       -DCMAKE_CXX_FLAGS="-DLOG4CPP_HAVE_UNISTD_H" \
                       -DBUILD_SHARED_LIBS=ON \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /log4cpp_src \
 && rm -rf /log4cpp_build



###########################
########## GENIE ##########
###########################
RUN source /setup_Dockerfile.sh \
 && printf "#ifndef CONFIG_H\n#define CONFIG_H\n#define LOG4CPP_HAVE_SSTREAM\n#endif" > /log4cpp_install/include/log4cpp/config.h \
 && ln -s /usr/lib64/libnsl.so.2 /usr/lib64/libnsl.so \
 && git clone --depth 1 --branch R-3_04_02 https://github.com/GENIE-MC/Generator /GENIE \
 && cd /GENIE \
 && ./configure --prefix=/GENIE_install \
                --with-libxml2-inc=/usr/include/libxml2 \
                --with-libxml2-lib=/usr/lib64 \
                --with-pythia6-lib=/Pythia6/v6_424/lib \
                --with-log4cpp-inc=/log4cpp_install/include \
                --with-log4cpp-lib=/log4cpp_install/lib \
                --enable-fnal \
                --disable-lhapdf5 \
                --enable-lhapdf6 \
                --with-lhapdf6-inc=/LHAPDF_install/include \
                --with-lhapdf6-lib=/LHAPDF_install/lib \
                --with-compiler=g++ \
 && make CXXFLAGS+=" -std=c++${STD} -fPIC -include cassert" -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /GENIE



##########################
########## NEST ##########
##########################
RUN source /setup_Dockerfile.sh \
 && git clone --depth 1 --branch v2.4.0 https://github.com/NESTCollaboration/nest /NEST_src \
 && mkdir /NEST_build \
 && mkdir /NEST_install \
 && cd /NEST_build \
 && cmake /NEST_src -DCMAKE_INSTALL_PREFIX=/NEST_install \
                    -DG4=ON \
                    -DBUILD_ROOT=OFF \
                    -DCMAKE_CXX_STANDARD=${STD} \
 && make -j${NCPU} \
 && make install \
 && cd / \
 && rm -rf /NEST_src \
 && rm -rf /NEST_build